name: Accessibility Audit

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  accessibility-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm install -g @axe-core/cli serve
        npm install axe-core puppeteer
        
    - name: Start local server
      run: |
        serve -s . -p 3000 &
        sleep 5
        
    - name: Run axe accessibility tests
      run: |
        mkdir -p reports
        
        echo "Testing accessibility-issues-demo.html (should have violations)..."
        npx axe http://localhost:3000/accessibility-issues-demo.html \
          --reporter json \
          --output reports/issues-demo-report.json || true
          
        echo "Testing accessibility-fixed-demo.html (should be clean)..."
        npx axe http://localhost:3000/accessibility-fixed-demo.html \
          --reporter json \
          --output reports/fixed-demo-report.json || true
          
        echo "Testing index.html..."
        npx axe http://localhost:3000/index.html \
          --reporter json \
          --output reports/index-report.json || true
        
    - name: Generate readable reports
      run: |
        # Create human-readable reports
        echo "# Accessibility Test Results" > reports/summary.md
        echo "" >> reports/summary.md
        echo "Generated on: $(date)" >> reports/summary.md
        echo "" >> reports/summary.md
        
        # Process each report
        for file in reports/*-report.json; do
          if [ -f "$file" ]; then
            filename=$(basename "$file" .json)
            page_name=$(echo "$filename" | sed 's/-report$//')
            
            echo "## $page_name" >> reports/summary.md
            echo "" >> reports/summary.md
            
            violations=$(jq '.violations | length' "$file")
            echo "**Violations found:** $violations" >> reports/summary.md
            echo "" >> reports/summary.md
            
            if [ "$violations" -gt 0 ]; then
              echo "### Issues:" >> reports/summary.md
              jq -r '.violations[] | "- **\(.impact | ascii_upcase)**: \(.help) (\(.nodes | length) instances)"' "$file" >> reports/summary.md
              echo "" >> reports/summary.md
            else
              echo "‚úÖ No accessibility violations found!" >> reports/summary.md
              echo "" >> reports/summary.md
            fi
          fi
        done
        
    - name: Check if fixed demo has critical issues
      run: |
        critical_issues=$(jq '[.violations[] | select(.impact == "critical")] | length' reports/fixed-demo-report.json)
        serious_issues=$(jq '[.violations[] | select(.impact == "serious")] | length' reports/fixed-demo-report.json)
        
        echo "Critical issues in fixed demo: $critical_issues"
        echo "Serious issues in fixed demo: $serious_issues"
        
        if [ "$critical_issues" -gt 0 ] || [ "$serious_issues" -gt 2 ]; then
          echo "‚ùå Fixed demo has too many critical/serious accessibility issues!"
          echo "Expected: 0 critical, ‚â§2 serious issues"
          echo "Found: $critical_issues critical, $serious_issues serious issues"
          exit 1
        else
          echo "‚úÖ Fixed demo passes accessibility threshold"
        fi
        
    - name: Upload accessibility reports
      uses: actions/upload-artifact@v4
      with:
        name: accessibility-reports
        path: reports/
        
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          try {
            const summary = fs.readFileSync('reports/summary.md', 'utf8');
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## üîç Accessibility Audit Results\n\n${summary}\n\nüìÅ Detailed reports are available in the workflow artifacts.`
            });
          } catch (error) {
            console.log('Could not post comment:', error.message);
          }